{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetMarketBookResponse",
  "type": "object",
  "required": [
    "asks",
    "bids"
  ],
  "properties": {
    "asks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BookLevel"
      }
    },
    "bids": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/BookLevel"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "BookLevel": {
      "type": "object",
      "required": [
        "price",
        "quantity"
      ],
      "properties": {
        "price": {
          "$ref": "#/definitions/Decimal"
        },
        "quantity": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
