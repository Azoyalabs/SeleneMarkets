/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, AdminExecuteMsg, CurrencyInfo, Cw20ReceiveMsg, QueryMsg, Addr, GetAdminResponse, Uint256, GetMarketBookResponse, BookLevel, GetMarketsResponse, SingleMarketInfo, OrderSide, GetUserAsksResponse, UserOrderRecord, GetUserBidsResponse, GetUserOrdersResponse } from "./Selene.types.js";
export interface SeleneReadOnlyInterface {
  contractAddress: string;
  getAdmin: () => Promise<GetAdminResponse>;
  getMarkets: () => Promise<GetMarketsResponse>;
  getUserBids: ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }) => Promise<GetUserBidsResponse>;
  getUserAsks: ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }) => Promise<GetUserAsksResponse>;
  getUserOrders: ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }) => Promise<GetUserOrdersResponse>;
  getMarketBook: ({
    marketId,
    nbLevels
  }: {
    marketId: number;
    nbLevels: number;
  }) => Promise<GetMarketBookResponse>;
}
export class SeleneQueryClient implements SeleneReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAdmin = this.getAdmin.bind(this);
    this.getMarkets = this.getMarkets.bind(this);
    this.getUserBids = this.getUserBids.bind(this);
    this.getUserAsks = this.getUserAsks.bind(this);
    this.getUserOrders = this.getUserOrders.bind(this);
    this.getMarketBook = this.getMarketBook.bind(this);
  }

  getAdmin = async (): Promise<GetAdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin: {}
    });
  };
  getMarkets = async (): Promise<GetMarketsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_markets: {}
    });
  };
  getUserBids = async ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }): Promise<GetUserBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_bids: {
        target_market: targetMarket,
        user_address: userAddress
      }
    });
  };
  getUserAsks = async ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }): Promise<GetUserAsksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_asks: {
        target_market: targetMarket,
        user_address: userAddress
      }
    });
  };
  getUserOrders = async ({
    targetMarket,
    userAddress
  }: {
    targetMarket?: number;
    userAddress: Addr;
  }): Promise<GetUserOrdersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_orders: {
        target_market: targetMarket,
        user_address: userAddress
      }
    });
  };
  getMarketBook = async ({
    marketId,
    nbLevels
  }: {
    marketId: number;
    nbLevels: number;
  }): Promise<GetMarketBookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_market_book: {
        market_id: marketId,
        nb_levels: nbLevels
      }
    });
  };
}
export interface SeleneInterface extends SeleneReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  limitOrder: ({
    marketId,
    price
  }: {
    marketId: number;
    price: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  marketOrder: ({
    marketId
  }: {
    marketId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeLimitOrder: ({
    marketId,
    price
  }: {
    marketId: number;
    price: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  admin: (adminExecuteMsg: AdminExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SeleneClient extends SeleneQueryClient implements SeleneInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.limitOrder = this.limitOrder.bind(this);
    this.marketOrder = this.marketOrder.bind(this);
    this.removeLimitOrder = this.removeLimitOrder.bind(this);
    this.admin = this.admin.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  limitOrder = async ({
    marketId,
    price
  }: {
    marketId: number;
    price: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      limit_order: {
        market_id: marketId,
        price
      }
    }, fee, memo, _funds);
  };
  marketOrder = async ({
    marketId
  }: {
    marketId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      market_order: {
        market_id: marketId
      }
    }, fee, memo, _funds);
  };
  removeLimitOrder = async ({
    marketId,
    price
  }: {
    marketId: number;
    price: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_limit_order: {
        market_id: marketId,
        price
      }
    }, fee, memo, _funds);
  };
  admin = async (adminExecuteMsg: AdminExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin: adminExecuteMsg
    }, fee, memo, _funds);
  };
}